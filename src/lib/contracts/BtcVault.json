{
  "address": "0xeDd108e6EE863acBFAc98312773492Caca8c0398",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "btcPubkey",
          "type": "bytes32"
        }
      ],
      "name": "Accepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Added",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShare",
          "type": "uint256"
        }
      ],
      "name": "Edited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "threshold",
              "type": "uint8"
            },
            {
              "internalType": "bytes1",
              "name": "status",
              "type": "bytes1"
            }
          ],
          "indexed": false,
          "internalType": "struct BtcVault.Vault",
          "name": "vault",
          "type": "tuple"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "btcPubkey",
          "type": "bytes32"
        }
      ],
      "name": "approveSignatory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "signatories",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "editSignatories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "finalizeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getSignatories",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "threshold",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "signatories",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "initializeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "threshold",
          "type": "uint8"
        },
        {
          "internalType": "bytes1",
          "name": "status",
          "type": "bytes1"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c338492f5c8a90ddd85c3738c2d36a2911dbbcb60cef99c815da3c71f2c17ee",
  "receipt": {
    "to": null,
    "from": "0xdEEca112eA6687d049533AeAF411C13Ec72c885f",
    "contractAddress": "0xeDd108e6EE863acBFAc98312773492Caca8c0398",
    "transactionIndex": 59,
    "gasUsed": "1200703",
    "logsBloom": "0x
    "blockHash": "0xd19cbebbc7fd458455745b3c6c72130a2603780b96643457c98ee7c392cc523a",
    "transactionHash": "0x8c338492f5c8a90ddd85c3738c2d36a2911dbbcb60cef99c815da3c71f2c17ee",
    "logs": [],
    "blockNumber": 7802861,
    "cumulativeGasUsed": "10554299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d68453c77e2433e424119eb8bc451c59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"btcPubkey\",\"type\":\"bytes32\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"Edited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"bytes1\",\"name\":\"status\",\"type\":\"bytes1\"}],\"indexed\":false,\"internalType\":\"struct BtcVault.Vault\",\"name\":\"vault\",\"type\":\"tuple\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"btcPubkey\",\"type\":\"bytes32\"}],\"name\":\"approveSignatory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"signatories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"editSignatories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"finalizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getSignatories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"signatories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"initializeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"bytes1\",\"name\":\"status\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BtcVault.sol\":\"BtcVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x1b8ac5ffdb80c20c9188267455197d9dcfeef46379aeb1b3a6cc622e879895ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BtcVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ncontract BtcVault {\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using SafeMath for uint256;\\n\\n    bytes1 private constant DRAFT = 0x00;\\n    bytes1 private constant FINAL = 0x01;\\n\\n    struct Vault {\\n        string name;\\n        address initiator;\\n        uint256 totalShare;\\n        uint8 threshold;\\n        bytes1 status;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    Vault[] public vaults;\\n    // vaultId => signatory => BTC public key\\n    mapping(uint256 => EnumerableMap.Bytes32ToBytes32Map) private signatoryPubkeys;\\n    // vaultId => signatory => share\\n    mapping(uint256 => EnumerableMap.AddressToUintMap) private signatoryShares;\\n\\n    /* ========== EVENTS ========== */\\n    event Initialized(uint256 indexed vaultId, Vault vault);\\n    event Added(uint256 indexed vaultId, address signatory, uint256 share);\\n    event Edited(uint256 indexed vaultId, address signatory, uint256 oldShare, uint256 newShare);\\n    event Accepted(uint256 indexed vaultId, address signatory, bytes32 btcPubkey);\\n    event Finalized(uint256 indexed vaultId);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function initializeVault(\\n        string memory name,\\n        uint8 threshold,\\n        address[] memory signatories,\\n        uint256[] memory shares\\n    ) external {\\n        require(signatories.length == shares.length, 'Mismatch signatories and shares');\\n\\n        uint256 vaultId = vaults.length;\\n        Vault memory vault;\\n\\n        for (uint256 i = 0; i < signatories.length; i++) {\\n            _addSignatory(vaultId, signatories[i], shares[i]);\\n            vault.totalShare = vault.totalShare.add(shares[i]);\\n        }\\n        // require(vault.totalShare == 1e18, 'Total share value out of range');\\n\\n        vault.name = name;\\n        vault.initiator = msg.sender;\\n        vault.threshold = threshold;\\n        vault.status = DRAFT;\\n        vaults.push(vault);\\n\\n        emit Initialized(vaultId, vault);\\n    }\\n\\n    function editSignatories(\\n        uint256 vaultId,\\n        address[] memory signatories,\\n        uint256[] memory shares\\n    ) public onlyInitiator(vaultId) isDraft(vaultId) {\\n        uint256 _totalShare = vaults[vaultId].totalShare;\\n        for (uint256 i = 0; i < signatories.length; i++) {\\n            require(signatoryShares[vaultId].contains(signatories[i]), 'Non-existent signatory');\\n            uint256 oldShare = signatoryShares[vaultId].get(signatories[i]);\\n            uint256 newShare = shares[i];\\n            _totalShare = _totalShare.sub(oldShare).add(newShare);\\n\\n            emit Edited(vaultId, signatories[i], oldShare, newShare);\\n        }\\n        vaults[vaultId].totalShare = _totalShare;\\n    }\\n\\n    function approveSignatory(uint256 vaultId, bytes32 btcPubkey) external onlySignatory(vaultId) isDraft(vaultId) {\\n        signatoryPubkeys[vaultId].set(bytes32(bytes20(msg.sender)), btcPubkey);\\n\\n        emit Accepted(vaultId, msg.sender, btcPubkey);\\n    }\\n\\n    function finalizeVault(uint256 vaultId) external onlyInitiator(vaultId) isDraft(vaultId) {\\n        require(signatoryShares[vaultId].length() == signatoryPubkeys[vaultId].length(), 'Mismatch shares and pubkeys');\\n        vaults[vaultId].status = FINAL;\\n\\n        emit Finalized(vaultId);\\n    }\\n\\n    function initiateWithdrawal() external {}\\n\\n    function approveWithdrawal() external {}\\n\\n    function _addSignatory(\\n        uint256 vaultId,\\n        address signatory,\\n        uint256 share\\n    ) private {\\n        signatoryShares[vaultId].set(signatory, share);\\n\\n        emit Added(vaultId, signatory, share);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getVaultLength() external view returns (uint256) {\\n        return vaults.length;\\n    }\\n\\n    function getSignatories(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            bytes32[] memory\\n        )\\n    {\\n        uint256 signatorySize = signatoryShares[vaultId].length();\\n        address[] memory signatories = new address[](signatorySize);\\n        uint256[] memory shares = new uint256[](signatorySize);\\n        bytes32[] memory btcPubkeys = new bytes32[](signatorySize);\\n\\n        for (uint256 i = 0; i < signatorySize; i++) {\\n            (address signatory, uint256 share) = signatoryShares[vaultId].at(i);\\n            signatories[i] = signatory;\\n            shares[i] = share;\\n            bytes32 signatoryBytes32 = bytes32(bytes20(signatory));\\n            if (signatoryPubkeys[vaultId].contains(signatoryBytes32)) {\\n                btcPubkeys[i] = signatoryPubkeys[vaultId].get(signatoryBytes32);\\n            }\\n        }\\n\\n        return (signatories, shares, btcPubkeys);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyInitiator(uint256 vaultId) {\\n        require(msg.sender == vaults[vaultId].initiator, 'Invalid initiator');\\n        _;\\n    }\\n\\n    modifier onlySignatory(uint256 vaultId) {\\n        require(signatoryShares[vaultId].contains(msg.sender), 'Invalid signatory');\\n        _;\\n    }\\n\\n    modifier isDraft(uint256 vaultId) {\\n        require(vaults[vaultId].status == DRAFT, 'Only available in DRAFT mode');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb5e3251ef559076e8e30b8b2cd40136c0be74aed08e703f05671d1a9210b386a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506114c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806365f4c0981161006657806365f4c098146100d3578063812617c7146100fe5780638c64ea4a1461010f578063b51d1d4f146100ab578063e49345af1461013357600080fd5b8063065e8c06146100985780630bb38379146100ad5780632c8b8bb3146100ab5780634aa61646146100c0575b600080fd5b6100ab6100a6366004610ee8565b610146565b005b6100ab6100bb366004610f01565b610306565b6100ab6100ce36600461106a565b610429565b6100e66100e1366004610ee8565b6106dd565b6040516100f593929190611112565b60405180910390f35b6000546040519081526020016100f5565b61012261011d366004610ee8565b6108e2565b6040516100f59594939291906111f6565b6100ab610141366004611259565b6109c3565b806000818154811061015a5761015a611345565b60009182526020909120600490910201600101546001600160a01b031633146101be5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21034b734ba34b0ba37b960791b60448201526064015b60405180910390fd5b600080548391908190839081106101d7576101d7611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b0319161461021a5760405162461bcd60e51b81526004016101b59061135b565b600083815260016020526040902061023190610bdb565b600084815260026020526040902061024890610bec565b146102955760405162461bcd60e51b815260206004820152601b60248201527f4d69736d617463682073686172657320616e64207075626b657973000000000060448201526064016101b5565b600160f81b600084815481106102ad576102ad611345565b600091825260208220600360049092020101805460f89390931c6101000261ff00199093169290921790915560405184917f839cf22e1ba87ce2f5b9bbf46cf0175a09eed52febdfaac8852478e68203c76391a2505050565b600082815260026020526040902082906103209033610bf7565b6103605760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e61746f727960781b60448201526064016101b5565b6000805484919081908390811061037957610379611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b031916146103bc5760405162461bcd60e51b81526004016101b59061135b565b60008481526001602052604090206103e7906bffffffffffffffffffffffff193360601b1685610c13565b50604080513381526020810185905285917f67fd58733483015fe5529bd439261f9b074e0783528b212f7dc81ae49d4c448d910160405180910390a250505050565b826000818154811061043d5761043d611345565b60009182526020909120600490910201600101546001600160a01b0316331461049c5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21034b734ba34b0ba37b960791b60448201526064016101b5565b600080548591908190839081106104b5576104b5611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b031916146104f85760405162461bcd60e51b81526004016101b59061135b565b600080868154811061050c5761050c611345565b906000526020600020906004020160020154905060005b85518110156106ab5761056a86828151811061054157610541611345565b6020026020010151600260008a8152602001908152602001600020610bf790919063ffffffff16565b6105af5760405162461bcd60e51b81526020600482015260166024820152754e6f6e2d6578697374656e74207369676e61746f727960501b60448201526064016101b5565b60006105ef8783815181106105c6576105c6611345565b6020026020010151600260008b8152602001908152602001600020610c3890919063ffffffff16565b9050600086838151811061060557610605611345565b6020026020010151905061062c816106268487610c4d90919063ffffffff16565b90610c59565b9350887ff0b9b1c52dccea1674897863bb2b1b6d73f395e91dae367476a223c560d4dabe89858151811061066257610662611345565b602090810291909101810151604080516001600160a01b03909216825291810186905290810184905260600160405180910390a2505080806106a3906113a8565b915050610523565b5080600087815481106106c0576106c0611345565b906000526020600020906004020160020181905550505050505050565b606080606060006106ff60026000878152602001908152602001600020610bec565b905060008167ffffffffffffffff81111561071c5761071c610f23565b604051908082528060200260200182016040528015610745578160200160208202803683370190505b50905060008267ffffffffffffffff81111561076357610763610f23565b60405190808252806020026020018201604052801561078c578160200160208202803683370190505b50905060008367ffffffffffffffff8111156107aa576107aa610f23565b6040519080825280602002602001820160405280156107d3578160200160208202803683370190505b50905060005b848110156108d357600089815260026020526040812081906107fb9084610c65565b915091508186848151811061081257610812611345565b60200260200101906001600160a01b031690816001600160a01b0316815250508085848151811061084557610845611345565b60209081029190910181019190915260008c81526001909152604090206bffffffffffffffffffffffff19606084901b16906108819082610c81565b156108bd5760008c815260016020526040902061089e9082610c8d565b8585815181106108b0576108b0611345565b6020026020010181815250505b50505080806108cb906113a8565b9150506107d9565b50919790965090945092505050565b600081815481106108f257600080fd5b9060005260206000209060040201600091509050806000018054610915906113c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610941906113c3565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050506001840154600285015460039095015493946001600160a01b039091169390925060ff81169150610100900460f81b85565b8051825114610a145760405162461bcd60e51b815260206004820152601f60248201527f4d69736d61746368207369676e61746f7269657320616e64207368617265730060448201526064016101b5565b600080546040805160a0810182526060808252602082018590529181018490529081018390526080810183905290915b8451811015610ad157610a8a83868381518110610a6357610a63611345565b6020026020010151868481518110610a7d57610a7d611345565b6020026020010151610cfd565b610aba848281518110610a9f57610a9f611345565b60200260200101518360400151610c5990919063ffffffff16565b604083015280610ac9816113a8565b915050610a44565b508581523360208083019190915260ff86166060830152600060808301819052805460018101825590805282518051849360049093027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630192610b38928492910190610e4f565b5060208201516001820180546001600160a01b039092166001600160a01b0319909216919091179055604080830151600283015560608301516003909201805460809094015160f81c6101000261ffff1990941660ff909316929092179290921790555182907ffc9b2906d41bed402b25a6aa72f8b6bdc2bf1f2d462cad8a1e6c726edb1873d190610bcb9084906113fe565b60405180910390a2505050505050565b6000610be682610d60565b92915050565b6000610be682610bdb565b6000610c0c836001600160a01b038416610c81565b9392505050565b60008281526002840160205260408120829055610c308484610d6a565b949350505050565b6000610c0c836001600160a01b038416610c8d565b6000610c0c828461145f565b6000610c0c8284611476565b6000808080610c748686610d76565b9097909650945050505050565b6000610c0c8383610da1565b600081815260028301602052604081205480151580610cb15750610cb18484610c81565b610c0c5760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000060448201526064016101b5565b6000838152600260205260409020610d16908383610db9565b50604080516001600160a01b03841681526020810183905284917fcc28be9b37d1b25ed34687c32a4a53e202c9c2b6efdce761d75e4885341e492b910160405180910390a2505050565b6000610be6825490565b6000610c0c8383610dcf565b60008080610d848585610e1e565b600081815260029690960160205260409095205494959350505050565b60008181526001830160205260408120541515610c0c565b6000610c30846001600160a01b03851684610c13565b6000818152600183016020526040812054610e1657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610be6565b506000610be6565b6000610c0c83836000826000018281548110610e3c57610e3c611345565b9060005260206000200154905092915050565b828054610e5b906113c3565b90600052602060002090601f016020900481019282610e7d5760008555610ec3565b82601f10610e9657805160ff1916838001178555610ec3565b82800160010185558215610ec3579182015b82811115610ec3578251825591602001919060010190610ea8565b50610ecf929150610ed3565b5090565b5b80821115610ecf5760008155600101610ed4565b600060208284031215610efa57600080fd5b5035919050565b60008060408385031215610f1457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6257610f62610f23565b604052919050565b600067ffffffffffffffff821115610f8457610f84610f23565b5060051b60200190565b600082601f830112610f9f57600080fd5b81356020610fb4610faf83610f6a565b610f39565b82815260059290921b84018101918181019086841115610fd357600080fd5b8286015b848110156110045780356001600160a01b0381168114610ff75760008081fd5b8352918301918301610fd7565b509695505050505050565b600082601f83011261102057600080fd5b81356020611030610faf83610f6a565b82815260059290921b8401810191818101908684111561104f57600080fd5b8286015b848110156110045780358352918301918301611053565b60008060006060848603121561107f57600080fd5b83359250602084013567ffffffffffffffff8082111561109e57600080fd5b6110aa87838801610f8e565b935060408601359150808211156110c057600080fd5b506110cd8682870161100f565b9150509250925092565b600081518084526020808501945080840160005b83811015611107578151875295820195908201906001016110eb565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156111545781516001600160a01b03168452928401929084019060010161112f565b5050508381038285015285518082528683019183019060005b818110156111895783518352928401929184019160010161116d565b5050848103604086015261119d81876110d7565b98975050505050505050565b6000815180845260005b818110156111cf576020818501810151868301820152016111b3565b818111156111e1576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061120960a08301886111a9565b6001600160a01b0396909616602083015250604081019390935260ff9190911660608301526001600160f81b031916608090910152919050565b803560ff8116811461125457600080fd5b919050565b6000806000806080858703121561126f57600080fd5b843567ffffffffffffffff8082111561128757600080fd5b818701915087601f83011261129b57600080fd5b81356020828211156112af576112af610f23565b6112c1601f8301601f19168201610f39565b8281528a828487010111156112d557600080fd5b8282860183830137600081840183015297506112f2898201611243565b96505050604087013591508082111561130a57600080fd5b61131688838901610f8e565b9350606087013591508082111561132c57600080fd5b506113398782880161100f565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4f6e6c7920617661696c61626c6520696e204452414654206d6f646500000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156113bc576113bc611392565b5060010190565b600181811c908216806113d757607f821691505b602082108114156113f857634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000825160a0602084015261141a60c08401826111a9565b905060018060a01b0360208501511660408401526040840151606084015260ff606085015116608084015260ff60f81b60808501511660a08401528091505092915050565b60008282101561147157611471611392565b500390565b6000821982111561148957611489611392565b50019056fea264697066735822122052a4835fe04897c4214e6709c09af5cb112474dba1899253a5217fc10fcb7e4c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806365f4c0981161006657806365f4c098146100d3578063812617c7146100fe5780638c64ea4a1461010f578063b51d1d4f146100ab578063e49345af1461013357600080fd5b8063065e8c06146100985780630bb38379146100ad5780632c8b8bb3146100ab5780634aa61646146100c0575b600080fd5b6100ab6100a6366004610ee8565b610146565b005b6100ab6100bb366004610f01565b610306565b6100ab6100ce36600461106a565b610429565b6100e66100e1366004610ee8565b6106dd565b6040516100f593929190611112565b60405180910390f35b6000546040519081526020016100f5565b61012261011d366004610ee8565b6108e2565b6040516100f59594939291906111f6565b6100ab610141366004611259565b6109c3565b806000818154811061015a5761015a611345565b60009182526020909120600490910201600101546001600160a01b031633146101be5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21034b734ba34b0ba37b960791b60448201526064015b60405180910390fd5b600080548391908190839081106101d7576101d7611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b0319161461021a5760405162461bcd60e51b81526004016101b59061135b565b600083815260016020526040902061023190610bdb565b600084815260026020526040902061024890610bec565b146102955760405162461bcd60e51b815260206004820152601b60248201527f4d69736d617463682073686172657320616e64207075626b657973000000000060448201526064016101b5565b600160f81b600084815481106102ad576102ad611345565b600091825260208220600360049092020101805460f89390931c6101000261ff00199093169290921790915560405184917f839cf22e1ba87ce2f5b9bbf46cf0175a09eed52febdfaac8852478e68203c76391a2505050565b600082815260026020526040902082906103209033610bf7565b6103605760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e61746f727960781b60448201526064016101b5565b6000805484919081908390811061037957610379611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b031916146103bc5760405162461bcd60e51b81526004016101b59061135b565b60008481526001602052604090206103e7906bffffffffffffffffffffffff193360601b1685610c13565b50604080513381526020810185905285917f67fd58733483015fe5529bd439261f9b074e0783528b212f7dc81ae49d4c448d910160405180910390a250505050565b826000818154811061043d5761043d611345565b60009182526020909120600490910201600101546001600160a01b0316331461049c5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21034b734ba34b0ba37b960791b60448201526064016101b5565b600080548591908190839081106104b5576104b5611345565b6000918252602090912060049091020160030154610100900460f81b6001600160f81b031916146104f85760405162461bcd60e51b81526004016101b59061135b565b600080868154811061050c5761050c611345565b906000526020600020906004020160020154905060005b85518110156106ab5761056a86828151811061054157610541611345565b6020026020010151600260008a8152602001908152602001600020610bf790919063ffffffff16565b6105af5760405162461bcd60e51b81526020600482015260166024820152754e6f6e2d6578697374656e74207369676e61746f727960501b60448201526064016101b5565b60006105ef8783815181106105c6576105c6611345565b6020026020010151600260008b8152602001908152602001600020610c3890919063ffffffff16565b9050600086838151811061060557610605611345565b6020026020010151905061062c816106268487610c4d90919063ffffffff16565b90610c59565b9350887ff0b9b1c52dccea1674897863bb2b1b6d73f395e91dae367476a223c560d4dabe89858151811061066257610662611345565b602090810291909101810151604080516001600160a01b03909216825291810186905290810184905260600160405180910390a2505080806106a3906113a8565b915050610523565b5080600087815481106106c0576106c0611345565b906000526020600020906004020160020181905550505050505050565b606080606060006106ff60026000878152602001908152602001600020610bec565b905060008167ffffffffffffffff81111561071c5761071c610f23565b604051908082528060200260200182016040528015610745578160200160208202803683370190505b50905060008267ffffffffffffffff81111561076357610763610f23565b60405190808252806020026020018201604052801561078c578160200160208202803683370190505b50905060008367ffffffffffffffff8111156107aa576107aa610f23565b6040519080825280602002602001820160405280156107d3578160200160208202803683370190505b50905060005b848110156108d357600089815260026020526040812081906107fb9084610c65565b915091508186848151811061081257610812611345565b60200260200101906001600160a01b031690816001600160a01b0316815250508085848151811061084557610845611345565b60209081029190910181019190915260008c81526001909152604090206bffffffffffffffffffffffff19606084901b16906108819082610c81565b156108bd5760008c815260016020526040902061089e9082610c8d565b8585815181106108b0576108b0611345565b6020026020010181815250505b50505080806108cb906113a8565b9150506107d9565b50919790965090945092505050565b600081815481106108f257600080fd5b9060005260206000209060040201600091509050806000018054610915906113c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610941906113c3565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050506001840154600285015460039095015493946001600160a01b039091169390925060ff81169150610100900460f81b85565b8051825114610a145760405162461bcd60e51b815260206004820152601f60248201527f4d69736d61746368207369676e61746f7269657320616e64207368617265730060448201526064016101b5565b600080546040805160a0810182526060808252602082018590529181018490529081018390526080810183905290915b8451811015610ad157610a8a83868381518110610a6357610a63611345565b6020026020010151868481518110610a7d57610a7d611345565b6020026020010151610cfd565b610aba848281518110610a9f57610a9f611345565b60200260200101518360400151610c5990919063ffffffff16565b604083015280610ac9816113a8565b915050610a44565b508581523360208083019190915260ff86166060830152600060808301819052805460018101825590805282518051849360049093027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630192610b38928492910190610e4f565b5060208201516001820180546001600160a01b039092166001600160a01b0319909216919091179055604080830151600283015560608301516003909201805460809094015160f81c6101000261ffff1990941660ff909316929092179290921790555182907ffc9b2906d41bed402b25a6aa72f8b6bdc2bf1f2d462cad8a1e6c726edb1873d190610bcb9084906113fe565b60405180910390a2505050505050565b6000610be682610d60565b92915050565b6000610be682610bdb565b6000610c0c836001600160a01b038416610c81565b9392505050565b60008281526002840160205260408120829055610c308484610d6a565b949350505050565b6000610c0c836001600160a01b038416610c8d565b6000610c0c828461145f565b6000610c0c8284611476565b6000808080610c748686610d76565b9097909650945050505050565b6000610c0c8383610da1565b600081815260028301602052604081205480151580610cb15750610cb18484610c81565b610c0c5760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000060448201526064016101b5565b6000838152600260205260409020610d16908383610db9565b50604080516001600160a01b03841681526020810183905284917fcc28be9b37d1b25ed34687c32a4a53e202c9c2b6efdce761d75e4885341e492b910160405180910390a2505050565b6000610be6825490565b6000610c0c8383610dcf565b60008080610d848585610e1e565b600081815260029690960160205260409095205494959350505050565b60008181526001830160205260408120541515610c0c565b6000610c30846001600160a01b03851684610c13565b6000818152600183016020526040812054610e1657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610be6565b506000610be6565b6000610c0c83836000826000018281548110610e3c57610e3c611345565b9060005260206000200154905092915050565b828054610e5b906113c3565b90600052602060002090601f016020900481019282610e7d5760008555610ec3565b82601f10610e9657805160ff1916838001178555610ec3565b82800160010185558215610ec3579182015b82811115610ec3578251825591602001919060010190610ea8565b50610ecf929150610ed3565b5090565b5b80821115610ecf5760008155600101610ed4565b600060208284031215610efa57600080fd5b5035919050565b60008060408385031215610f1457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6257610f62610f23565b604052919050565b600067ffffffffffffffff821115610f8457610f84610f23565b5060051b60200190565b600082601f830112610f9f57600080fd5b81356020610fb4610faf83610f6a565b610f39565b82815260059290921b84018101918181019086841115610fd357600080fd5b8286015b848110156110045780356001600160a01b0381168114610ff75760008081fd5b8352918301918301610fd7565b509695505050505050565b600082601f83011261102057600080fd5b81356020611030610faf83610f6a565b82815260059290921b8401810191818101908684111561104f57600080fd5b8286015b848110156110045780358352918301918301611053565b60008060006060848603121561107f57600080fd5b83359250602084013567ffffffffffffffff8082111561109e57600080fd5b6110aa87838801610f8e565b935060408601359150808211156110c057600080fd5b506110cd8682870161100f565b9150509250925092565b600081518084526020808501945080840160005b83811015611107578151875295820195908201906001016110eb565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156111545781516001600160a01b03168452928401929084019060010161112f565b5050508381038285015285518082528683019183019060005b818110156111895783518352928401929184019160010161116d565b5050848103604086015261119d81876110d7565b98975050505050505050565b6000815180845260005b818110156111cf576020818501810151868301820152016111b3565b818111156111e1576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061120960a08301886111a9565b6001600160a01b0396909616602083015250604081019390935260ff9190911660608301526001600160f81b031916608090910152919050565b803560ff8116811461125457600080fd5b919050565b6000806000806080858703121561126f57600080fd5b843567ffffffffffffffff8082111561128757600080fd5b818701915087601f83011261129b57600080fd5b81356020828211156112af576112af610f23565b6112c1601f8301601f19168201610f39565b8281528a828487010111156112d557600080fd5b8282860183830137600081840183015297506112f2898201611243565b96505050604087013591508082111561130a57600080fd5b61131688838901610f8e565b9350606087013591508082111561132c57600080fd5b506113398782880161100f565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4f6e6c7920617661696c61626c6520696e204452414654206d6f646500000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156113bc576113bc611392565b5060010190565b600181811c908216806113d757607f821691505b602082108114156113f857634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000825160a0602084015261141a60c08401826111a9565b905060018060a01b0360208501511660408401526040840151606084015260ff606085015116608084015260ff60f81b60808501511660a08401528091505092915050565b60008282101561147157611471611392565b500390565b6000821982111561148957611489611392565b50019056fea264697066735822122052a4835fe04897c4214e6709c09af5cb112474dba1899253a5217fc10fcb7e4c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2068,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "vaults",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Vault)2064_storage)dyn_storage"
      },
      {
        "astId": 2073,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "signatoryPubkeys",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Bytes32ToBytes32Map)327_storage)"
      },
      {
        "astId": 2078,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "signatoryShares",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(AddressToUintMap)1001_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vault)2064_storage)dyn_storage": {
        "base": "t_struct(Vault)2064_storage",
        "encoding": "dynamic_array",
        "label": "struct BtcVault.Vault[]",
        "numberOfBytes": "32"
      },
      "t_bytes1": {
        "encoding": "inplace",
        "label": "bytes1",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AddressToUintMap)1001_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.AddressToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressToUintMap)1001_storage"
      },
      "t_mapping(t_uint256,t_struct(Bytes32ToBytes32Map)327_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.Bytes32ToBytes32Map)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32ToBytes32Map)327_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)1001_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 1000,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)327_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)1638_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1637,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1444_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)327_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 322,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)1638_storage"
          },
          {
            "astId": 326,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1444_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1439,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1443,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vault)2064_storage": {
        "encoding": "inplace",
        "label": "struct BtcVault.Vault",
        "members": [
          {
            "astId": 2055,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2057,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "initiator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2059,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "totalShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2061,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "threshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 2063,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "status",
            "offset": 1,
            "slot": "3",
            "type": "t_bytes1"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
