{
  "address": "0x3b1d8882a05aa914ff9cd99c8e35f1b833b461d1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "btcPubkey",
          "type": "bytes32"
        }
      ],
      "name": "Accepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Added",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShare",
          "type": "uint256"
        }
      ],
      "name": "Edited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "threshold",
              "type": "uint16"
            },
            {
              "internalType": "bytes1",
              "name": "status",
              "type": "bytes1"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct BtcVault.Vault",
          "name": "vault",
          "type": "tuple"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "authorizedAddrList",
          "type": "address[]"
        }
      ],
      "name": "addAuthorizedAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "btcPubkey",
          "type": "bytes32"
        }
      ],
      "name": "approveSignatory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "approveWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "signatories",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "editSignatories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "finalizeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getAuthorizedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getSignatories",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signatory",
          "type": "address"
        }
      ],
      "name": "getSignatoryVaults",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes1[]",
          "name": "",
          "type": "bytes1[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "threshold",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "signatories",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "authorizedAddrList",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "timelock",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "threshold",
              "type": "uint16"
            }
          ],
          "internalType": "struct BtcVault.TimelockThreshold[]",
          "name": "tsList",
          "type": "tuple[]"
        }
      ],
      "name": "initializeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timelockThresholds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timelock",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "threshold",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "threshold",
          "type": "uint16"
        },
        {
          "internalType": "bytes1",
          "name": "status",
          "type": "bytes1"
        },
        {
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x250574d2223028b899aa6d143443279c598661d9f9c24a87c4503bf32ebe22c7",
  "receipt": {
    "to": null,
    "from": "0xdeeca112ea6687d049533aeaf411c13ec72c885f",
    "contractAddress": "0x3b1d8882a05aa914ff9cd99c8e35f1b833b461d1",
    "transactionIndex": "0x18",
    "gasUsed": "0x1b4cd3",
    "logsBloom": "0x
    "blockHash": "0x0ce48534da2c45b880818667b72a360ffc9b644d9bc5a6db92962038ff060f3c",
    "transactionHash": "0xa23083b57ceb1010c9f47c4dfd48ab6c0aeb55d99152c3fc1ab07c3a82332301",
    "logs": [],
    "blockNumber": "0x78aaa5",
    "cumulativeGasUsed": "0x69cdfc",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b22e1abf9295895c8576600e53ea0c96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"btcPubkey\",\"type\":\"bytes32\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"Edited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"internalType\":\"bytes1\",\"name\":\"status\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BtcVault.Vault\",\"name\":\"vault\",\"type\":\"tuple\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"authorizedAddrList\",\"type\":\"address[]\"}],\"name\":\"addAuthorizedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"btcPubkey\",\"type\":\"bytes32\"}],\"name\":\"approveSignatory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"approveWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"signatories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"editSignatories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"finalizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getAuthorizedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getSignatories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"}],\"name\":\"getSignatoryVaults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes1[]\",\"name\":\"\",\"type\":\"bytes1[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"signatories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"authorizedAddrList\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timelock\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"internalType\":\"struct BtcVault.TimelockThreshold[]\",\"name\":\"tsList\",\"type\":\"tuple[]\"}],\"name\":\"initializeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"initiateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timelockThresholds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timelock\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"internalType\":\"bytes1\",\"name\":\"status\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BtcVault.sol\":\"BtcVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistentkey\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x1b8ac5ffdb80c20c9188267455197d9dcfeef46379aeb1b3a6cc622e879895ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BtcVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ncontract BtcVault {\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant SHARE_DENOMINATOR = 1e4;\\n\\n    bytes1 private constant DRAFT = 0x00;\\n    bytes1 private constant FINAL = 0x01;\\n\\n    bytes1 private constant PENDING = 0x00;\\n    bytes1 private constant ACCEPTED = 0x01;\\n\\n    struct Vault {\\n        string name;\\n        address initiator;\\n        uint16 threshold;\\n        bytes1 status;\\n        uint256 totalShare;\\n    }\\n\\n    struct TimelockThreshold {\\n        // The timestamp at which the threshold took effect\\n        uint32 timelock;\\n        uint16 threshold;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    Vault[] public vaults;\\n    TimelockThreshold[] public timelockThresholds;\\n    // vaultId => signatory => BTC public key\\n    mapping(uint256 => EnumerableMap.Bytes32ToBytes32Map) private signatoryPubkeys;\\n    // vaultId => signatory => share\\n    mapping(uint256 => EnumerableMap.AddressToUintMap) private signatoryShares;\\n    // vaultId => authorized address\\n    mapping(uint256 => EnumerableSet.AddressSet) private authorizedAddresses;\\n    // signatory => vaultId set\\n    mapping(address => EnumerableSet.UintSet) private signatoryVaults;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Initialized(uint256 indexed vaultId, Vault vault);\\n    event Added(uint256 indexed vaultId, address signatory, uint256 share);\\n    event Edited(uint256 indexed vaultId, address signatory, uint256 oldShare, uint256 newShare);\\n    event Accepted(uint256 indexed vaultId, address signatory, bytes32 btcPubkey);\\n    event Finalized(uint256 indexed vaultId);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function initializeVault(\\n        string memory name,\\n        uint8 threshold,\\n        address[] memory signatories,\\n        uint256[] memory shares,\\n        address[] memory authorizedAddrList,\\n        TimelockThreshold[] memory tsList\\n    ) external {\\n        require(signatories.length == shares.length, 'Mismatch signatories and shares');\\n        require(threshold <= SHARE_DENOMINATOR, 'Threshold out of range');\\n        require(tsList.length <= 3, 'Only supports up to 3 timelocks');\\n\\n        uint256 vaultId = vaults.length;\\n        Vault memory vault;\\n\\n        for (uint256 i = 0; i < signatories.length; i++) {\\n            _addSignatory(vaultId, signatories[i], shares[i]);\\n            vault.totalShare = vault.totalShare.add(shares[i]);\\n        }\\n\\n        if (tsList.length >= 1) {\\n            require(tsList[0].threshold < threshold, 'Invalid threshold');\\n            require(tsList[0].timelock > block.timestamp, 'Invalid timelock');\\n        }\\n        if (tsList.length > 1) {\\n            for (uint256 i = 1; i < tsList.length; i++) {\\n                require(tsList[i - 1].threshold > tsList[i].threshold, 'Invalid threshold');\\n                require(tsList[i - 1].timelock < tsList[i].timelock, 'Invalid timelock');\\n            }\\n        }\\n        for (uint256 i = 0; i < tsList.length; i++) {\\n            timelockThresholds.push(tsList[i]);\\n        }\\n\\n        for (uint256 i = 0; i < authorizedAddrList.length; i++) {\\n            authorizedAddresses[vaultId].add(authorizedAddrList[i]);\\n        }\\n\\n        vault.name = name;\\n        vault.initiator = msg.sender;\\n        vault.threshold = threshold;\\n        vault.status = DRAFT;\\n        vaults.push(vault);\\n\\n        emit Initialized(vaultId, vault);\\n    }\\n\\n    function editSignatories(\\n        uint256 vaultId,\\n        address[] memory signatories,\\n        uint256[] memory shares\\n    ) public onlyInitiator(vaultId) isDraft(vaultId) {\\n        uint256 _totalShare = vaults[vaultId].totalShare;\\n        for (uint256 i = 0; i < signatories.length; i++) {\\n            require(signatoryShares[vaultId].contains(signatories[i]), 'Non-existent signatory');\\n            uint256 oldShare = signatoryShares[vaultId].get(signatories[i]);\\n            uint256 newShare = shares[i];\\n            _totalShare = _totalShare.sub(oldShare).add(newShare);\\n\\n            emit Edited(vaultId, signatories[i], oldShare, newShare);\\n        }\\n        vaults[vaultId].totalShare = _totalShare;\\n    }\\n\\n    function addAuthorizedAddresses(uint256 vaultId, address[] memory authorizedAddrList)\\n        external\\n        onlyInitiator(vaultId)\\n    {\\n        for (uint256 i = 0; i < authorizedAddrList.length; i++) {\\n            authorizedAddresses[vaultId].add(authorizedAddrList[i]);\\n        }\\n    }\\n\\n    function approveSignatory(uint256 vaultId, bytes32 btcPubkey) external onlySignatory(vaultId) isDraft(vaultId) {\\n        require(btcPubkey != bytes32(0), 'Invalid btcPubkey');\\n        signatoryPubkeys[vaultId].set(bytes32(bytes20(msg.sender)), btcPubkey);\\n\\n        emit Accepted(vaultId, msg.sender, btcPubkey);\\n    }\\n\\n    function finalizeVault(uint256 vaultId) external onlyInitiator(vaultId) isDraft(vaultId) {\\n        require(signatoryShares[vaultId].length() == signatoryPubkeys[vaultId].length(), 'Mismatch shares and pubkeys');\\n        require(vaults[vaultId].totalShare == SHARE_DENOMINATOR, 'Total share value out of range');\\n\\n        vaults[vaultId].status = FINAL;\\n\\n        emit Finalized(vaultId);\\n    }\\n\\n    function initiateWithdrawal(uint256 vaultId) external onlyAuthorized(vaultId) {}\\n\\n    function approveWithdrawal(uint256 vaultId) external {}\\n\\n    function _addSignatory(\\n        uint256 vaultId,\\n        address signatory,\\n        uint256 share\\n    ) private {\\n        signatoryShares[vaultId].set(signatory, share);\\n        signatoryVaults[signatory].add(vaultId);\\n\\n        emit Added(vaultId, signatory, share);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getVaultLength() external view returns (uint256) {\\n        return vaults.length;\\n    }\\n\\n    function getSignatories(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            bytes32[] memory\\n        )\\n    {\\n        uint256 signatorySize = signatoryShares[vaultId].length();\\n        address[] memory signatories = new address[](signatorySize);\\n        uint256[] memory shares = new uint256[](signatorySize);\\n        bytes32[] memory btcPubkeys = new bytes32[](signatorySize);\\n\\n        for (uint256 i = 0; i < signatorySize; i++) {\\n            (address signatory, uint256 share) = signatoryShares[vaultId].at(i);\\n            signatories[i] = signatory;\\n            shares[i] = share;\\n            bytes32 signatoryBytes32 = bytes32(bytes20(signatory));\\n            if (signatoryPubkeys[vaultId].contains(signatoryBytes32)) {\\n                btcPubkeys[i] = signatoryPubkeys[vaultId].get(signatoryBytes32);\\n            }\\n        }\\n\\n        return (signatories, shares, btcPubkeys);\\n    }\\n\\n    function getSignatoryVaults(address signatory) external view returns (uint256[] memory, bytes1[] memory) {\\n        uint256[] memory vaultIds = signatoryVaults[signatory].values();\\n        bytes1[] memory approveStatus = new bytes1[](vaultIds.length);\\n        bytes32 signatoryBytes32 = bytes32(bytes20(signatory));\\n\\n        for (uint256 i = 0; i < vaultIds.length; i++) {\\n            uint256 vaultId = vaultIds[i];\\n            approveStatus[i] = signatoryPubkeys[vaultId].contains(signatoryBytes32) ? ACCEPTED : PENDING;\\n        }\\n\\n        return (vaultIds, approveStatus);\\n    }\\n\\n    function getAuthorizedAddresses(uint256 vaultId) external view returns (address[] memory) {\\n        return authorizedAddresses[vaultId].values();\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyInitiator(uint256 vaultId) {\\n        require(msg.sender == vaults[vaultId].initiator, 'Invalid initiator');\\n        _;\\n    }\\n\\n    modifier onlySignatory(uint256 vaultId) {\\n        require(signatoryShares[vaultId].contains(msg.sender), 'Invalid signatory');\\n        _;\\n    }\\n\\n    modifier onlyAuthorized(uint256 vaultId) {\\n        require(authorizedAddresses[vaultId].contains(msg.sender), 'Invalid authorized address');\\n        _;\\n    }\\n\\n    modifier isDraft(uint256 vaultId) {\\n        require(vaults[vaultId].status == DRAFT, 'Only available in DRAFT mode');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x8215bb930c0a5b0bca2bd001307b482e5d747bd6c76e47dfd38ea81819bfb17a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f69806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638c64ea4a1161008c5780639eceddea116100665780639eceddea146101b5578063aa4ed6b5146101c6578063ad676c89146101d9578063b9242bc3146101fa57600080fd5b80638c64ea4a1461015e5780638ff3ba0b146101825780639640b4921461019557600080fd5b8063065e8c06146100d45780630bb38379146100e957806312edde5e146100fc5780634aa616461461010f57806365f4c09814610122578063812617c71461014d575b600080fd5b6100e76100e2366004611746565b61022c565b005b6100e76100f736600461175f565b610447565b6100e761010a366004611746565b6105a8565b6100e761011d3660046118fe565b610612565b610135610130366004611746565b6108a4565b604051610144939291906119df565b60405180910390f35b600054604051908152602001610144565b61017161016c366004611746565b610aa4565b604051610144959493929190611a95565b6100e7610190366004611ae3565b610b88565b6101a86101a3366004611746565b610c3a565b6040516101449190611b2a565b6100e76101c3366004611746565b50565b6100e76101d4366004611c61565b610c5a565b6101ec6101e7366004611d42565b61121f565b604051610144929190611d5d565b61020d610208366004611746565b611348565b6040805163ffffffff909316835261ffff909116602083015201610144565b806000818154811061024057610240611dbe565b60009182526020909120600390910201600101546001600160a01b031633146102845760405162461bcd60e51b815260040161027b90611dd4565b60405180910390fd5b6000805483919081908390811061029d5761029d611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146102e25760405162461bcd60e51b815260040161027b90611dff565b60008381526002602052604090206102f99061137c565b600084815260036020526040902061031090611387565b1461035d5760405162461bcd60e51b815260206004820152601b60248201527f4d69736d617463682073686172657320616e64207075626b6579730000000000604482015260640161027b565b6127106000848154811061037357610373611dbe565b906000526020600020906003020160020154146103d25760405162461bcd60e51b815260206004820152601e60248201527f546f74616c2073686172652076616c7565206f7574206f662072616e67650000604482015260640161027b565b600160f81b600084815481106103ea576103ea611dbe565b600091825260208220600160039092020101805460f89390931c600160b01b0260ff60b01b199093169290921790915560405184917f839cf22e1ba87ce2f5b9bbf46cf0175a09eed52febdfaac8852478e68203c76391a2505050565b600082815260036020526040902082906104619033611392565b6104a15760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e61746f727960781b604482015260640161027b565b600080548491908190839081106104ba576104ba611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146104ff5760405162461bcd60e51b815260040161027b90611dff565b826105405760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206274635075626b657960781b604482015260640161027b565b6000848152600260205260409020610566906001600160601b03193360601b16856113ae565b50604080513381526020810185905285917f67fd58733483015fe5529bd439261f9b074e0783528b212f7dc81ae49d4c448d910160405180910390a250505050565b600081815260046020526040902081906105c290336113d3565b61060e5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420617574686f72697a65642061646472657373000000000000604482015260640161027b565b5050565b826000818154811061062657610626611dbe565b60009182526020909120600390910201600101546001600160a01b031633146106615760405162461bcd60e51b815260040161027b90611dd4565b6000805485919081908390811061067a5761067a611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146106bf5760405162461bcd60e51b815260040161027b90611dff565b60008086815481106106d3576106d3611dbe565b906000526020600020906003020160020154905060005b85518110156108725761073186828151811061070857610708611dbe565b6020026020010151600360008a815260200190815260200160002061139290919063ffffffff16565b6107765760405162461bcd60e51b81526020600482015260166024820152754e6f6e2d6578697374656e74207369676e61746f727960501b604482015260640161027b565b60006107b687838151811061078d5761078d611dbe565b6020026020010151600360008b81526020019081526020016000206113f590919063ffffffff16565b905060008683815181106107cc576107cc611dbe565b602002602001015190506107f3816107ed848761140a90919063ffffffff16565b90611416565b9350887ff0b9b1c52dccea1674897863bb2b1b6d73f395e91dae367476a223c560d4dabe89858151811061082957610829611dbe565b602090810291909101810151604080516001600160a01b03909216825291810186905290810184905260600160405180910390a25050808061086a90611e4c565b9150506106ea565b50806000878154811061088757610887611dbe565b906000526020600020906003020160020181905550505050505050565b606080606060006108c660036000878152602001908152602001600020611387565b905060008167ffffffffffffffff8111156108e3576108e3611781565b60405190808252806020026020018201604052801561090c578160200160208202803683370190505b50905060008267ffffffffffffffff81111561092a5761092a611781565b604051908082528060200260200182016040528015610953578160200160208202803683370190505b50905060008367ffffffffffffffff81111561097157610971611781565b60405190808252806020026020018201604052801561099a578160200160208202803683370190505b50905060005b84811015610a9557600089815260036020526040812081906109c29084611422565b91509150818684815181106109d9576109d9611dbe565b60200260200101906001600160a01b031690816001600160a01b03168152505080858481518110610a0c57610a0c611dbe565b60209081029190910181019190915260008c81526002909152604090206001600160601b0319606084901b1690610a43908261143e565b15610a7f5760008c8152600260205260409020610a60908261144a565b858581518110610a7257610a72611dbe565b6020026020010181815250505b5050508080610a8d90611e4c565b9150506109a0565b50919790965090945092505050565b60008181548110610ab457600080fd5b9060005260206000209060030201600091509050806000018054610ad790611e67565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0390611e67565b8015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b505050600184015460029094015492936001600160a01b0381169361ffff600160a01b8304169350600160b01b90910460f81b915085565b8160008181548110610b9c57610b9c611dbe565b60009182526020909120600390910201600101546001600160a01b03163314610bd75760405162461bcd60e51b815260040161027b90611dd4565b60005b8251811015610c3457610c21838281518110610bf857610bf8611dbe565b6020026020010151600460008781526020019081526020016000206114ba90919063ffffffff16565b5080610c2c81611e4c565b915050610bda565b50505050565b6000818152600460205260409020606090610c54906114cf565b92915050565b8251845114610cab5760405162461bcd60e51b815260206004820152601f60248201527f4d69736d61746368207369676e61746f7269657320616e642073686172657300604482015260640161027b565b6127108560ff161115610cf95760405162461bcd60e51b81526020600482015260166024820152755468726573686f6c64206f7574206f662072616e676560501b604482015260640161027b565b600381511115610d4b5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920737570706f72747320757020746f20332074696d656c6f636b7300604482015260640161027b565b600080546040805160a0810182526060808252602082018590529181018490529081018390526080810183905290915b8651811015610e0857610dc183888381518110610d9a57610d9a611dbe565b6020026020010151888481518110610db457610db4611dbe565b60200260200101516114dc565b610df1868281518110610dd657610dd6611dbe565b6020026020010151836080015161141690919063ffffffff16565b608083015280610e0081611e4c565b915050610d7b565b506001835110610ee0578660ff1683600081518110610e2957610e29611dbe565b60200260200101516020015161ffff1610610e7a5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b604482015260640161027b565b4283600081518110610e8e57610e8e611dbe565b60200260200101516000015163ffffffff1611610ee05760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642074696d656c6f636b60801b604482015260640161027b565b60018351111561102f5760015b835181101561102d57838181518110610f0857610f08611dbe565b60200260200101516020015161ffff1684600183610f269190611ea2565b81518110610f3657610f36611dbe565b60200260200101516020015161ffff1611610f875760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b604482015260640161027b565b838181518110610f9957610f99611dbe565b60200260200101516000015163ffffffff1684600183610fb99190611ea2565b81518110610fc957610fc9611dbe565b60200260200101516000015163ffffffff161061101b5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642074696d656c6f636b60801b604482015260640161027b565b8061102581611e4c565b915050610eed565b505b60005b83518110156110b157600184828151811061104f5761104f611dbe565b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff166401000000000265ffffffffffff1990911663ffffffff90931692909217919091179055806110a981611e4c565b915050611032565b5060005b845181101561110f576110fc8582815181106110d3576110d3611dbe565b6020026020010151600460008681526020019081526020016000206114ba90919063ffffffff16565b508061110781611e4c565b9150506110b5565b508781523360208083019190915260ff88166040830152600060608301819052805460018101825590805282518051849360039093027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301926111769284929101906116ad565b506020820151600182018054604080860151606087015160f81c600160b01b0260ff60b01b1961ffff909216600160a01b026001600160b01b03199094166001600160a01b039096169590951792909217919091169290921790556080909201516002909101555182907f6a442fe74510e060887936710ee698690f4ec7e9085d9a0a890c3bfe285e07b49061120d908490611eb9565b60405180910390a25050505050505050565b6001600160a01b03811660009081526005602052604081206060918291611245906114cf565b90506000815167ffffffffffffffff81111561126357611263611781565b60405190808252806020026020018201604052801561128c578160200160208202803683370190505b5090506001600160601b0319606086901b1660005b835181101561133c5760008482815181106112be576112be611dbe565b602002602001015190506112ed836002600084815260200190815260200160002061143e90919063ffffffff16565b6112f85760006112fe565b600160f81b5b84838151811061131057611310611dbe565b6001600160f81b031990921660209283029190910190910152508061133481611e4c565b9150506112a1565b50919590945092505050565b6001818154811061135857600080fd5b60009182526020909120015463ffffffff81169150640100000000900461ffff1682565b6000610c5482611562565b6000610c548261137c565b60006113a7836001600160a01b03841661143e565b9392505050565b600082815260028401602052604081208290556113cb848461156c565b949350505050565b6001600160a01b038116600090815260018301602052604081205415156113a7565b60006113a7836001600160a01b03841661144a565b60006113a78284611ea2565b60006113a78284611f1b565b60008080806114318686611578565b9097909650945050505050565b60006113a783836115a3565b60008181526002830160205260408120548015158061146e575061146e848461143e565b6113a75760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604482015260640161027b565b60006113a7836001600160a01b0384166115bb565b606060006113a78361160a565b60008381526003602052604090206114f5908383611666565b506001600160a01b0382166000908152600560205260409020611518908461156c565b50604080516001600160a01b03841681526020810183905284917fcc28be9b37d1b25ed34687c32a4a53e202c9c2b6efdce761d75e4885341e492b910160405180910390a2505050565b6000610c54825490565b60006113a783836115bb565b60008080611586858561167c565b600081815260029690960160205260409095205494959350505050565b600081815260018301602052604081205415156113a7565b600081815260018301602052604081205461160257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c54565b506000610c54565b60608160000180548060200260200160405190810160405280929190818152602001828054801561165a57602002820191906000526020600020905b815481526020019060010190808311611646575b50505050509050919050565b60006113cb846001600160a01b038516846113ae565b60006113a78383600082600001828154811061169a5761169a611dbe565b9060005260206000200154905092915050565b8280546116b990611e67565b90600052602060002090601f0160209004810192826116db5760008555611721565b82601f106116f457805160ff1916838001178555611721565b82800160010185558215611721579182015b82811115611721578251825591602001919060010190611706565b5061172d929150611731565b5090565b5b8082111561172d5760008155600101611732565b60006020828403121561175857600080fd5b5035919050565b6000806040838503121561177257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156117ba576117ba611781565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117e9576117e9611781565b604052919050565b600067ffffffffffffffff82111561180b5761180b611781565b5060051b60200190565b80356001600160a01b038116811461182c57600080fd5b919050565b600082601f83011261184257600080fd5b81356020611857611852836117f1565b6117c0565b82815260059290921b8401810191818101908684111561187657600080fd5b8286015b848110156118985761188b81611815565b835291830191830161187a565b509695505050505050565b600082601f8301126118b457600080fd5b813560206118c4611852836117f1565b82815260059290921b840181019181810190868411156118e357600080fd5b8286015b8481101561189857803583529183019183016118e7565b60008060006060848603121561191357600080fd5b83359250602084013567ffffffffffffffff8082111561193257600080fd5b61193e87838801611831565b9350604086013591508082111561195457600080fd5b50611961868287016118a3565b9150509250925092565b600081518084526020808501945080840160005b838110156119a45781516001600160a01b03168752958201959082019060010161197f565b509495945050505050565b600081518084526020808501945080840160005b838110156119a4578151875295820195908201906001016119c3565b6060815260006119f2606083018661196b565b602083820381850152611a0582876119af565b8481036040860152855180825282870193509082019060005b81811015611a3a57845183529383019391830191600101611a1e565b509098975050505050505050565b6000815180845260005b81811015611a6e57602081850181015186830182015201611a52565b81811115611a80576000602083870101525b50601f01601f19169290920160200192915050565b60a081526000611aa860a0830188611a48565b6001600160a01b039690961660208301525061ffff9390931660408401526001600160f81b0319919091166060830152608090910152919050565b60008060408385031215611af657600080fd5b82359150602083013567ffffffffffffffff811115611b1457600080fd5b611b2085828601611831565b9150509250929050565b6020815260006113a7602083018461196b565b600082601f830112611b4e57600080fd5b813567ffffffffffffffff811115611b6857611b68611781565b611b7b601f8201601f19166020016117c0565b818152846020838601011115611b9057600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461182c57600080fd5b600082601f830112611bcf57600080fd5b81356020611bdf611852836117f1565b82815260069290921b84018101918181019086841115611bfe57600080fd5b8286015b848110156118985760408189031215611c1b5760008081fd5b611c23611797565b813563ffffffff81168114611c385760008081fd5b81528185013561ffff81168114611c4f5760008081fd5b81860152835291830191604001611c02565b60008060008060008060c08789031215611c7a57600080fd5b863567ffffffffffffffff80821115611c9257600080fd5b611c9e8a838b01611b3d565b9750611cac60208a01611bad565b96506040890135915080821115611cc257600080fd5b611cce8a838b01611831565b95506060890135915080821115611ce457600080fd5b611cf08a838b016118a3565b94506080890135915080821115611d0657600080fd5b611d128a838b01611831565b935060a0890135915080821115611d2857600080fd5b50611d3589828a01611bbe565b9150509295509295509295565b600060208284031215611d5457600080fd5b6113a782611815565b604081526000611d7060408301856119af565b82810360208481019190915284518083528582019282019060005b81811015611db15784516001600160f81b03191683529383019391830191600101611d8b565b5090979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082526011908201527024b73b30b634b21034b734ba34b0ba37b960791b604082015260600190565b6020808252601c908201527f4f6e6c7920617661696c61626c6520696e204452414654206d6f646500000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e6057611e60611e36565b5060010190565b600181811c90821680611e7b57607f821691505b60208210811415611e9c57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015611eb457611eb4611e36565b500390565b602081526000825160a06020840152611ed560c0840182611a48565b905060018060a01b03602085015116604084015261ffff604085015116606084015260ff60f81b6060850151166080840152608084015160a08401528091505092915050565b60008219821115611f2e57611f2e611e36565b50019056fea26469706673582212206cf8440c6e0c2bdaae1ec0847d42d7ef1631d0eb54c80c91db270c334021a39d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638c64ea4a1161008c5780639eceddea116100665780639eceddea146101b5578063aa4ed6b5146101c6578063ad676c89146101d9578063b9242bc3146101fa57600080fd5b80638c64ea4a1461015e5780638ff3ba0b146101825780639640b4921461019557600080fd5b8063065e8c06146100d45780630bb38379146100e957806312edde5e146100fc5780634aa616461461010f57806365f4c09814610122578063812617c71461014d575b600080fd5b6100e76100e2366004611746565b61022c565b005b6100e76100f736600461175f565b610447565b6100e761010a366004611746565b6105a8565b6100e761011d3660046118fe565b610612565b610135610130366004611746565b6108a4565b604051610144939291906119df565b60405180910390f35b600054604051908152602001610144565b61017161016c366004611746565b610aa4565b604051610144959493929190611a95565b6100e7610190366004611ae3565b610b88565b6101a86101a3366004611746565b610c3a565b6040516101449190611b2a565b6100e76101c3366004611746565b50565b6100e76101d4366004611c61565b610c5a565b6101ec6101e7366004611d42565b61121f565b604051610144929190611d5d565b61020d610208366004611746565b611348565b6040805163ffffffff909316835261ffff909116602083015201610144565b806000818154811061024057610240611dbe565b60009182526020909120600390910201600101546001600160a01b031633146102845760405162461bcd60e51b815260040161027b90611dd4565b60405180910390fd5b6000805483919081908390811061029d5761029d611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146102e25760405162461bcd60e51b815260040161027b90611dff565b60008381526002602052604090206102f99061137c565b600084815260036020526040902061031090611387565b1461035d5760405162461bcd60e51b815260206004820152601b60248201527f4d69736d617463682073686172657320616e64207075626b6579730000000000604482015260640161027b565b6127106000848154811061037357610373611dbe565b906000526020600020906003020160020154146103d25760405162461bcd60e51b815260206004820152601e60248201527f546f74616c2073686172652076616c7565206f7574206f662072616e67650000604482015260640161027b565b600160f81b600084815481106103ea576103ea611dbe565b600091825260208220600160039092020101805460f89390931c600160b01b0260ff60b01b199093169290921790915560405184917f839cf22e1ba87ce2f5b9bbf46cf0175a09eed52febdfaac8852478e68203c76391a2505050565b600082815260036020526040902082906104619033611392565b6104a15760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e61746f727960781b604482015260640161027b565b600080548491908190839081106104ba576104ba611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146104ff5760405162461bcd60e51b815260040161027b90611dff565b826105405760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206274635075626b657960781b604482015260640161027b565b6000848152600260205260409020610566906001600160601b03193360601b16856113ae565b50604080513381526020810185905285917f67fd58733483015fe5529bd439261f9b074e0783528b212f7dc81ae49d4c448d910160405180910390a250505050565b600081815260046020526040902081906105c290336113d3565b61060e5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420617574686f72697a65642061646472657373000000000000604482015260640161027b565b5050565b826000818154811061062657610626611dbe565b60009182526020909120600390910201600101546001600160a01b031633146106615760405162461bcd60e51b815260040161027b90611dd4565b6000805485919081908390811061067a5761067a611dbe565b6000918252602090912060039091020160010154600160b01b900460f81b6001600160f81b031916146106bf5760405162461bcd60e51b815260040161027b90611dff565b60008086815481106106d3576106d3611dbe565b906000526020600020906003020160020154905060005b85518110156108725761073186828151811061070857610708611dbe565b6020026020010151600360008a815260200190815260200160002061139290919063ffffffff16565b6107765760405162461bcd60e51b81526020600482015260166024820152754e6f6e2d6578697374656e74207369676e61746f727960501b604482015260640161027b565b60006107b687838151811061078d5761078d611dbe565b6020026020010151600360008b81526020019081526020016000206113f590919063ffffffff16565b905060008683815181106107cc576107cc611dbe565b602002602001015190506107f3816107ed848761140a90919063ffffffff16565b90611416565b9350887ff0b9b1c52dccea1674897863bb2b1b6d73f395e91dae367476a223c560d4dabe89858151811061082957610829611dbe565b602090810291909101810151604080516001600160a01b03909216825291810186905290810184905260600160405180910390a25050808061086a90611e4c565b9150506106ea565b50806000878154811061088757610887611dbe565b906000526020600020906003020160020181905550505050505050565b606080606060006108c660036000878152602001908152602001600020611387565b905060008167ffffffffffffffff8111156108e3576108e3611781565b60405190808252806020026020018201604052801561090c578160200160208202803683370190505b50905060008267ffffffffffffffff81111561092a5761092a611781565b604051908082528060200260200182016040528015610953578160200160208202803683370190505b50905060008367ffffffffffffffff81111561097157610971611781565b60405190808252806020026020018201604052801561099a578160200160208202803683370190505b50905060005b84811015610a9557600089815260036020526040812081906109c29084611422565b91509150818684815181106109d9576109d9611dbe565b60200260200101906001600160a01b031690816001600160a01b03168152505080858481518110610a0c57610a0c611dbe565b60209081029190910181019190915260008c81526002909152604090206001600160601b0319606084901b1690610a43908261143e565b15610a7f5760008c8152600260205260409020610a60908261144a565b858581518110610a7257610a72611dbe565b6020026020010181815250505b5050508080610a8d90611e4c565b9150506109a0565b50919790965090945092505050565b60008181548110610ab457600080fd5b9060005260206000209060030201600091509050806000018054610ad790611e67565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0390611e67565b8015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b505050600184015460029094015492936001600160a01b0381169361ffff600160a01b8304169350600160b01b90910460f81b915085565b8160008181548110610b9c57610b9c611dbe565b60009182526020909120600390910201600101546001600160a01b03163314610bd75760405162461bcd60e51b815260040161027b90611dd4565b60005b8251811015610c3457610c21838281518110610bf857610bf8611dbe565b6020026020010151600460008781526020019081526020016000206114ba90919063ffffffff16565b5080610c2c81611e4c565b915050610bda565b50505050565b6000818152600460205260409020606090610c54906114cf565b92915050565b8251845114610cab5760405162461bcd60e51b815260206004820152601f60248201527f4d69736d61746368207369676e61746f7269657320616e642073686172657300604482015260640161027b565b6127108560ff161115610cf95760405162461bcd60e51b81526020600482015260166024820152755468726573686f6c64206f7574206f662072616e676560501b604482015260640161027b565b600381511115610d4b5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920737570706f72747320757020746f20332074696d656c6f636b7300604482015260640161027b565b600080546040805160a0810182526060808252602082018590529181018490529081018390526080810183905290915b8651811015610e0857610dc183888381518110610d9a57610d9a611dbe565b6020026020010151888481518110610db457610db4611dbe565b60200260200101516114dc565b610df1868281518110610dd657610dd6611dbe565b6020026020010151836080015161141690919063ffffffff16565b608083015280610e0081611e4c565b915050610d7b565b506001835110610ee0578660ff1683600081518110610e2957610e29611dbe565b60200260200101516020015161ffff1610610e7a5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b604482015260640161027b565b4283600081518110610e8e57610e8e611dbe565b60200260200101516000015163ffffffff1611610ee05760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642074696d656c6f636b60801b604482015260640161027b565b60018351111561102f5760015b835181101561102d57838181518110610f0857610f08611dbe565b60200260200101516020015161ffff1684600183610f269190611ea2565b81518110610f3657610f36611dbe565b60200260200101516020015161ffff1611610f875760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b604482015260640161027b565b838181518110610f9957610f99611dbe565b60200260200101516000015163ffffffff1684600183610fb99190611ea2565b81518110610fc957610fc9611dbe565b60200260200101516000015163ffffffff161061101b5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642074696d656c6f636b60801b604482015260640161027b565b8061102581611e4c565b915050610eed565b505b60005b83518110156110b157600184828151811061104f5761104f611dbe565b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff166401000000000265ffffffffffff1990911663ffffffff90931692909217919091179055806110a981611e4c565b915050611032565b5060005b845181101561110f576110fc8582815181106110d3576110d3611dbe565b6020026020010151600460008681526020019081526020016000206114ba90919063ffffffff16565b508061110781611e4c565b9150506110b5565b508781523360208083019190915260ff88166040830152600060608301819052805460018101825590805282518051849360039093027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301926111769284929101906116ad565b506020820151600182018054604080860151606087015160f81c600160b01b0260ff60b01b1961ffff909216600160a01b026001600160b01b03199094166001600160a01b039096169590951792909217919091169290921790556080909201516002909101555182907f6a442fe74510e060887936710ee698690f4ec7e9085d9a0a890c3bfe285e07b49061120d908490611eb9565b60405180910390a25050505050505050565b6001600160a01b03811660009081526005602052604081206060918291611245906114cf565b90506000815167ffffffffffffffff81111561126357611263611781565b60405190808252806020026020018201604052801561128c578160200160208202803683370190505b5090506001600160601b0319606086901b1660005b835181101561133c5760008482815181106112be576112be611dbe565b602002602001015190506112ed836002600084815260200190815260200160002061143e90919063ffffffff16565b6112f85760006112fe565b600160f81b5b84838151811061131057611310611dbe565b6001600160f81b031990921660209283029190910190910152508061133481611e4c565b9150506112a1565b50919590945092505050565b6001818154811061135857600080fd5b60009182526020909120015463ffffffff81169150640100000000900461ffff1682565b6000610c5482611562565b6000610c548261137c565b60006113a7836001600160a01b03841661143e565b9392505050565b600082815260028401602052604081208290556113cb848461156c565b949350505050565b6001600160a01b038116600090815260018301602052604081205415156113a7565b60006113a7836001600160a01b03841661144a565b60006113a78284611ea2565b60006113a78284611f1b565b60008080806114318686611578565b9097909650945050505050565b60006113a783836115a3565b60008181526002830160205260408120548015158061146e575061146e848461143e565b6113a75760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604482015260640161027b565b60006113a7836001600160a01b0384166115bb565b606060006113a78361160a565b60008381526003602052604090206114f5908383611666565b506001600160a01b0382166000908152600560205260409020611518908461156c565b50604080516001600160a01b03841681526020810183905284917fcc28be9b37d1b25ed34687c32a4a53e202c9c2b6efdce761d75e4885341e492b910160405180910390a2505050565b6000610c54825490565b60006113a783836115bb565b60008080611586858561167c565b600081815260029690960160205260409095205494959350505050565b600081815260018301602052604081205415156113a7565b600081815260018301602052604081205461160257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c54565b506000610c54565b60608160000180548060200260200160405190810160405280929190818152602001828054801561165a57602002820191906000526020600020905b815481526020019060010190808311611646575b50505050509050919050565b60006113cb846001600160a01b038516846113ae565b60006113a78383600082600001828154811061169a5761169a611dbe565b9060005260206000200154905092915050565b8280546116b990611e67565b90600052602060002090601f0160209004810192826116db5760008555611721565b82601f106116f457805160ff1916838001178555611721565b82800160010185558215611721579182015b82811115611721578251825591602001919060010190611706565b5061172d929150611731565b5090565b5b8082111561172d5760008155600101611732565b60006020828403121561175857600080fd5b5035919050565b6000806040838503121561177257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156117ba576117ba611781565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117e9576117e9611781565b604052919050565b600067ffffffffffffffff82111561180b5761180b611781565b5060051b60200190565b80356001600160a01b038116811461182c57600080fd5b919050565b600082601f83011261184257600080fd5b81356020611857611852836117f1565b6117c0565b82815260059290921b8401810191818101908684111561187657600080fd5b8286015b848110156118985761188b81611815565b835291830191830161187a565b509695505050505050565b600082601f8301126118b457600080fd5b813560206118c4611852836117f1565b82815260059290921b840181019181810190868411156118e357600080fd5b8286015b8481101561189857803583529183019183016118e7565b60008060006060848603121561191357600080fd5b83359250602084013567ffffffffffffffff8082111561193257600080fd5b61193e87838801611831565b9350604086013591508082111561195457600080fd5b50611961868287016118a3565b9150509250925092565b600081518084526020808501945080840160005b838110156119a45781516001600160a01b03168752958201959082019060010161197f565b509495945050505050565b600081518084526020808501945080840160005b838110156119a4578151875295820195908201906001016119c3565b6060815260006119f2606083018661196b565b602083820381850152611a0582876119af565b8481036040860152855180825282870193509082019060005b81811015611a3a57845183529383019391830191600101611a1e565b509098975050505050505050565b6000815180845260005b81811015611a6e57602081850181015186830182015201611a52565b81811115611a80576000602083870101525b50601f01601f19169290920160200192915050565b60a081526000611aa860a0830188611a48565b6001600160a01b039690961660208301525061ffff9390931660408401526001600160f81b0319919091166060830152608090910152919050565b60008060408385031215611af657600080fd5b82359150602083013567ffffffffffffffff811115611b1457600080fd5b611b2085828601611831565b9150509250929050565b6020815260006113a7602083018461196b565b600082601f830112611b4e57600080fd5b813567ffffffffffffffff811115611b6857611b68611781565b611b7b601f8201601f19166020016117c0565b818152846020838601011115611b9057600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461182c57600080fd5b600082601f830112611bcf57600080fd5b81356020611bdf611852836117f1565b82815260069290921b84018101918181019086841115611bfe57600080fd5b8286015b848110156118985760408189031215611c1b5760008081fd5b611c23611797565b813563ffffffff81168114611c385760008081fd5b81528185013561ffff81168114611c4f5760008081fd5b81860152835291830191604001611c02565b60008060008060008060c08789031215611c7a57600080fd5b863567ffffffffffffffff80821115611c9257600080fd5b611c9e8a838b01611b3d565b9750611cac60208a01611bad565b96506040890135915080821115611cc257600080fd5b611cce8a838b01611831565b95506060890135915080821115611ce457600080fd5b611cf08a838b016118a3565b94506080890135915080821115611d0657600080fd5b611d128a838b01611831565b935060a0890135915080821115611d2857600080fd5b50611d3589828a01611bbe565b9150509295509295509295565b600060208284031215611d5457600080fd5b6113a782611815565b604081526000611d7060408301856119af565b82810360208481019190915284518083528582019282019060005b81811015611db15784516001600160f81b03191683529383019391830191600101611d8b565b5090979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082526011908201527024b73b30b634b21034b734ba34b0ba37b960791b604082015260600190565b6020808252601c908201527f4f6e6c7920617661696c61626c6520696e204452414654206d6f646500000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e6057611e60611e36565b5060010190565b600181811c90821680611e7b57607f821691505b60208210811415611e9c57634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015611eb457611eb4611e36565b500390565b602081526000825160a06020840152611ed560c0840182611a48565b905060018060a01b03602085015116604084015261ffff604085015116606084015260ff60f81b6060850151166080840152608084015160a08401528091505092915050565b60008219821115611f2e57611f2e611e36565b50019056fea26469706673582212206cf8440c6e0c2bdaae1ec0847d42d7ef1631d0eb54c80c91db270c334021a39d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2091,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "vaults",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Vault)2082_storage)dyn_storage"
      },
      {
        "astId": 2095,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "timelockThresholds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(TimelockThreshold)2087_storage)dyn_storage"
      },
      {
        "astId": 2100,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "signatoryPubkeys",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Bytes32ToBytes32Map)327_storage)"
      },
      {
        "astId": 2105,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "signatoryShares",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(AddressToUintMap)1001_storage)"
      },
      {
        "astId": 2110,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "authorizedAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)1745_storage)"
      },
      {
        "astId": 2115,
        "contract": "contracts/BtcVault.sol:BtcVault",
        "label": "signatoryVaults",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UintSet)1902_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TimelockThreshold)2087_storage)dyn_storage": {
        "base": "t_struct(TimelockThreshold)2087_storage",
        "encoding": "dynamic_array",
        "label": "struct BtcVault.TimelockThreshold[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vault)2082_storage)dyn_storage": {
        "base": "t_struct(Vault)2082_storage",
        "encoding": "dynamic_array",
        "label": "struct BtcVault.Vault[]",
        "numberOfBytes": "32"
      },
      "t_bytes1": {
        "encoding": "inplace",
        "label": "bytes1",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintSet)1902_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1902_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)1745_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1745_storage"
      },
      "t_mapping(t_uint256,t_struct(AddressToUintMap)1001_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.AddressToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressToUintMap)1001_storage"
      },
      "t_mapping(t_uint256,t_struct(Bytes32ToBytes32Map)327_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.Bytes32ToBytes32Map)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32ToBytes32Map)327_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)1745_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1744,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1444_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AddressToUintMap)1001_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 1000,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)327_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)1638_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1637,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1444_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)327_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 322,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)1638_storage"
          },
          {
            "astId": 326,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1444_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1439,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1443,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TimelockThreshold)2087_storage": {
        "encoding": "inplace",
        "label": "struct BtcVault.TimelockThreshold",
        "members": [
          {
            "astId": 2084,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "timelock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2086,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "threshold",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)1902_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1901,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1444_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vault)2082_storage": {
        "encoding": "inplace",
        "label": "struct BtcVault.Vault",
        "members": [
          {
            "astId": 2073,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2075,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "initiator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2077,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "threshold",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 2079,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "status",
            "offset": 22,
            "slot": "1",
            "type": "t_bytes1"
          },
          {
            "astId": 2081,
            "contract": "contracts/BtcVault.sol:BtcVault",
            "label": "totalShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
